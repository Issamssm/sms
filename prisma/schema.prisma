generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Dashboard {
  id                String          @id @default(uuid())
  userId            String
  autoUpdateStatus  Boolean         @default(true)

  products          Product[] 
  categories        Category[]
  supplier          Supplier[]
  customer          Customer[]
  inventoriesIncome  InventoryIncome[]
  inventoriesOutcome InventoryOutcome[]


  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([id])

}

enum ProductStatus {
  AVAILABLE
  OUT_OF_STOCK
  LOW_STOCK
}

enum ProductStocks {
  FIFO
  LIFO
  CUMP
  HPP
  LPP
  MANUAL
}

enum ProductPrice {
  WAC
  LPP
  HSP
  LSP
  MANUAL
}

enum MeasurementUnit {
  PIECE
  KILOGRAM
  GRAM
  LITER 
  MILLILITER 
  METER 
  CENTIMETER 
  MILLIMETER 
  BOX 
  PACK 
  DOZEN
  NONE
}


model Product {
  id                String          @id @default(uuid())
  name              String
  description       String?
  status            ProductStatus   @default(OUT_OF_STOCK)
  sellingPrice      Decimal?        @default(0)
  dashboardId       String
  dashboard         Dashboard       @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  categoryId        String?
  category          Category?       @relation(fields: [categoryId], references: [id])
  stockMethode      ProductStocks   @default(MANUAL)
  priceMethode      ProductPrice    @default(MANUAL)
  minInventory      Decimal?        @default(0)
  currentStock      Decimal?        @default(0)
  warehouseLocation String?
  measureUnit       MeasurementUnit @default(NONE)

  inventoriesIncome  InventoryIncome[]
  inventoriesOutcome InventoryOutcome[]

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([dashboardId, id])
}

model Category {
  id                String          @id @default(uuid())
  name              String
  dashboardId       String
  dashboard         Dashboard       @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  products          Product[] 

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([dashboardId, id])
}


model InventoryIncome {
  id                String          @id @default(uuid())
  productId         String
  product           Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  dashboardId       String
  dashboard         Dashboard       @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  quantity          Int             @default(0)
  costPrice         Decimal         @default(0)
  supplierId        String?
  supplier          Supplier?       @relation(fields: [supplierId], references: [id])
  purchaseDate      DateTime        @default(now())
  invoiceNumber     String?
  expiryDate        DateTime?
  location          String?
  notes             String? 

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([dashboardId, productId, id])
}

model InventoryOutcome {
  id                String          @id @default(uuid())
  productId         String
  product           Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  dashboardId       String
  dashboard         Dashboard       @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  quantity          Int             @default(0)
  sellingPrice      Decimal         @default(0)
  customerId        String?
  customer          Customer?       @relation(fields: [customerId], references: [id])
  invoiceNumber     String? 
  shippedAt         DateTime        @default(now())  
  location          String?    
  notes             String? 

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([dashboardId, productId, id])
}


model Supplier {
  id                String          @id @default(uuid())
  name              String
  address           String?
  contactInfo       String?
  dashboardId       String
  dashboard         Dashboard       @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  inventoryIncome   InventoryIncome[]

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Customer {
  id                String          @id @default(uuid())
  name              String
  contactInfo       String?
  address           String?
  dashboardId       String
  dashboard         Dashboard       @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  inventoryOutcome  InventoryOutcome[]

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}